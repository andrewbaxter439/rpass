// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_cpp_len
StringVector read_cpp_len(String file_name, unsigned long min_l, unsigned long max_l);
RcppExport SEXP _rpass_read_cpp_len(SEXP file_nameSEXP, SEXP min_lSEXP, SEXP max_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type min_l(min_lSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type max_l(max_lSEXP);
    rcpp_result_gen = Rcpp::wrap(read_cpp_len(file_name, min_l, max_l));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rpass_read_cpp_len", (DL_FUNC) &_rpass_read_cpp_len, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rpass(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
